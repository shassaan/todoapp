{"version":3,"sources":["logo.svg","Header.jsx","Footer.jsx","ApiHelper.js","Context/TaskContext.js","InputComponent.jsx","TaskList.jsx","TaskListContainer.jsx","MainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Footer","prop","children","API_PATH","getAllTasks","a","fetch","method","reponse","json","deleteTask","taskId","updateTask","task","taskObj","id","text","taskDate","isFinished","body","JSON","stringify","headers","Headers","AddTask","TaskContext","React","createContext","InputComponent","useState","setTask","useContext","taskHook","setTaskHook","PostTask","type","placeholder","onChange","e","target","value","onClick","TaskList","data","title","delTask","finishTask","style","border","map","i","key","display","href","TaskListContainer","tasks","setTasks","useEffect","response","filter","x","MainContent","App","Provider","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eaf9c264.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\n\r\nconst Header = ()=>{\r\n    return(\r\n        <h1 className=\"jumbotron text-center\"> <span className=\"text text-info\">To</span> Do App</h1>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nconst Footer = (prop) => {\r\n    return (\r\n        <h3 className=\"p-5 jumbotron text-center\">\r\n            {prop.children}  \r\n        </h3>\r\n    )\r\n}\r\n\r\nexport default Footer;","export const API_PATH = \"https://doetnetodoapi.herokuapp.com/api/ToDoEntities\";\r\n\r\n\r\nexport const getAllTasks = async () => {\r\n    let reponse = await fetch(`${API_PATH}`,{\r\n        method:\"GET\"\r\n    })\r\n        return await reponse.json();\r\n\r\n\r\n}\r\n\r\nexport const deleteTask = async (taskId) => {\r\n    let reponse = await fetch(`${API_PATH}/${taskId}`,{\r\n        method:\"DELETE\"\r\n    })\r\n        return await reponse.json();\r\n\r\n\r\n}\r\n\r\nexport const updateTask = async (taskId,task) => {\r\n    let taskObj = {\r\n        id : taskId,\r\n        text : task.text,\r\n        taskDate : task.taskDate,\r\n        isFinished : true\r\n    };\r\n    let reponse = await fetch(`${API_PATH}/${taskId}`,{\r\n        method:\"PUT\",\r\n        body:JSON.stringify(taskObj),\r\n        headers:new Headers({'content-type': 'application/json'})\r\n    })\r\n        return await reponse;\r\n\r\n\r\n}\r\n\r\n\r\nexport const AddTask = async (task) => {\r\n    let reponse = await fetch(`${API_PATH}`,{\r\n        method:\"POST\",\r\n        body:JSON.stringify(task),\r\n        headers:new Headers({'content-type': 'application/json'})\r\n    })\r\n        return await reponse.json();\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const TaskContext = React.createContext(0);","import React, { useState, useContext } from 'react'\r\nimport { AddTask } from './ApiHelper'\r\nimport { TaskContext } from './Context/TaskContext'\r\nconst InputComponent = () => {\r\n    const [task, setTask] = useState({\r\n        text: '',\r\n        isFinished: false\r\n    })\r\n\r\n\r\n    const [taskHook, setTaskHook] = useContext(TaskContext);\r\n\r\n    const PostTask = async () => {\r\n        await AddTask(task)\r\n        setTaskHook(taskHook + 1);\r\n    }\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"form-group col-9\">\r\n                <input type=\"text\" placeholder=\"Add Tast\" className=\"form-control\"\r\n                    onChange={(e) => { setTask({ text: e.target.value }) }} />\r\n            </div>\r\n            <div className=\"form-group col-3\">\r\n                <button className=\"btn btn-info\" onClick={PostTask}> + Add Task</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputComponent;","import React, { useContext } from 'react'\r\nimport { deleteTask, updateTask } from './ApiHelper';\r\nimport { TaskContext } from './Context/TaskContext'\r\n\r\nconst TaskList = (prop) => {\r\n    const { data = [], title = \"No Title\" } = prop || [];\r\n    const [taskHook, setTaskHook] = useContext(TaskContext);\r\n\r\n    const delTask = async (e) => {\r\n        let response = await deleteTask(e.target.id)\r\n        if (response) {\r\n            setTaskHook(taskHook + 1);\r\n        }\r\n    }\r\n\r\n\r\n    const finishTask = async (task) => {\r\n        let response = await updateTask(task.id, task)\r\n        if (response) {\r\n            setTaskHook(taskHook + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-1\" style={{ border: '1px solid black' }}>\r\n            <h2 className=\"text-center\">{title}</h2>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>S No.</th>\r\n                        <th>Task</th>\r\n                        <th>Date</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        data.map((value, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{i + 1}</td>\r\n                                    <td>{value.text}</td>\r\n                                    <td>{value.taskDate}</td>\r\n                                    <td>{value.isFinished ? <p style={{ display: 'inline' }}>Completed</p> : <a href=\"#\" onClick={() => { finishTask(value) }}>complete</a>} <a href=\"#\" onClick={delTask} id={value.id}>Delete</a></td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default TaskList;","import React, { useEffect, useState, useContext } from 'react'\r\nimport TaskList from './TaskList'\r\nimport { getAllTasks } from './ApiHelper'\r\nimport { TaskContext } from './Context/TaskContext';\r\nconst TaskListContainer = () => {\r\n    const [tasks, setTasks] = useState([]);\r\n    const taskHook = useContext(TaskContext)[0];\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            let response = await getAllTasks();\r\n            \r\n            setTasks(response); \r\n        }\r\n        fetch();\r\n\r\n    }, [taskHook]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <TaskList title=\"Pending Tasks\" data={tasks.filter(x=> !x.isFinished)}/>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <TaskList title=\"Completed Tasks\" data={tasks.filter(x=> x.isFinished)}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default TaskListContainer;","import React from 'react'\r\nimport InputComponent from './InputComponent'\r\nimport TaskListContainer from './TaskListContainer'\r\nconst MainContent = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <InputComponent />\r\n            <TaskListContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MainContent;","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport MainContent from './MainContent';\r\nimport { TaskContext } from './Context/TaskContext'\r\n\r\nfunction App() {\r\n  const taskHook = useState(0);\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Header />\r\n      <TaskContext.Provider value={taskHook}>\r\n        <MainContent />\r\n      </TaskContext.Provider>\r\n      <Footer>\r\n        CopyRight {new Date().getFullYear()}\r\n      </Footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}